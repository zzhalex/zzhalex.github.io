{"version":3,"sources":["components/header.js","textInfo.js","components/profile.js","components/project.js","components/demo.js","components/body.js","App.js","serviceWorker.js","index.js"],"names":["NavItem","setActive","e","props","getActive","target","id","Class","this","value","parseInt","active","className","toString","onClick","name","React","Component","linkedIn","href","rel","alt","src","gitHub","Header","data","setHeader","numbers","activeIndex","activeId","NavItemList","map","number","key","textInfo","headerinfo","profileinfo","git","logo","body","type","link","desp","homepageInfo","leftSideTitle","leftSideSubtitle","resumeInfo","education","company","position","time","location","work","projectInfo","tech","description","demoInfo","title","subtitle","app","textinfo","expDiv","workExp","eduExp","leftSide","rightSide","Profile","comboDiv","projectDiv","Project","demoDiv","Demo","Body","content","headerInfo","App","setState","state","navItems","Nav","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.724847e2.chunk.js","sourcesContent":["import React from \"react\";\n\nclass NavItem extends React.Component {\n  setActive = (e) => {\n    this.props.getActive(e.target.id);\n  };\n  render() {\n    let Class = \"NavItem\";\n    if (this.props.value === parseInt(this.props.active)) {\n      Class = \"NavItem active\";\n    }\n    return (\n      <div\n        className={Class}\n        id={parseInt(this.props.value.toString())}\n        onClick={this.setActive}\n      >\n        {this.props.name}\n      </div>\n    );\n  }\n}\n\nconst linkedIn = (\n  <a\n    className=\"linkedinLink\"\n    href=\"https://www.linkedin.com/in/zzhalex/\"\n    target=\"_blank\"\n    rel=\"noopener noreferrer\"\n  >\n    <img\n      className=\"LinkedinLogo\"\n      alt=\"Linkedin\"\n      src={process.env.PUBLIC_URL + \"/logo/linkedin.svg\"}\n    />\n  </a>\n);\n\nconst gitHub = (\n  <a\n    className=\"gitHubLink\"\n    href=\"https://github.com/zzhalex\"\n    target=\"_blank\"\n    rel=\"noopener noreferrer\"\n  >\n    <img\n      className=\"githubLogo\"\n      alt=\"github\"\n      src={process.env.PUBLIC_URL + \"/logo/github.svg\"}\n    />\n  </a>\n);\n\nclass Header extends React.Component {\n  getActive = (data) => {\n    this.props.setHeader(data);\n  };\n\n  render() {\n    const numbers = this.props.numbers;\n    const activeIndex = this.props.activeId;\n    const NavItemList = numbers.map((number) => (\n      <NavItem\n        key={number.id.toString()}\n        value={number.id}\n        name={number.name}\n        active={activeIndex}\n        getActive={this.getActive}\n      />\n    ));\n    return (\n      <div className=\"navBar\">\n        <div className=\"LinkedinIcon\">{linkedIn}</div>\n        <div className=\"GithubIcon\">{gitHub}</div>\n        <div className=\"Nav\">{NavItemList}</div>\n      </div>\n    );\n  }\n}\n\nexport default Header;\n","let headerinfo = [\n  {\n    id: 1,\n    name: \"Profile\",\n  },\n  {\n    id: 2,\n    name: \"Project\",\n  },\n  {\n    id: 3,\n    name: \"Demo\",\n  },\n];\n\nlet profileinfo = [\n  {\n    git: \"GitLab\",\n    logo: \"img/gitlab.svg\",\n    body: [\n      {\n        name: \"Playlist\",\n        type: \"img/nodejs.png\",\n        link: \"https://csil-git1.cs.surrey.sfu.ca/zhihaoz/ex6-470\",\n        desp: \"Developed a Playlists web app by using Node.js, SQL, jQuery.Provisioned app automatically using Vagrant and Chef, and used Nginx as the Web server. Used DB driver to load data from the database and show all of them to user.\",\n      },\n      {\n        name: \"HotCooks\",\n        type: \"img/rails.png\",\n        link: \"https://csil-git1.cs.surrey.sfu.ca/mca117/HotCooks\",\n        desp: \"HotCooks is a website where users can share their recipes, cooking materials and food masterpieces. This website can help users learn to cook and fall in love with cooking. Users can make friends and learn different cooking styles from each other.\",\n      },\n      {\n        name: \"MvcMovie\",\n        type: \"img/net.png\",\n        link: \"https://csil-git1.cs.surrey.sfu.ca/zhihaoz/MvcMovie\",\n        desp: \"Used .NET MVC to build the web-based application to sharing Movie. Completed the API for users to upload, delete and change data. Used SQL server local DB to maintain database and table for the application.\",\n      },\n    ],\n  },\n  {\n    git: \"GitHub\",\n    logo: \"img/github.svg\",\n    body: [\n      {\n        name: \"PHP Blog\",\n        type: \"img/php.png\",\n        link: \"https://gentle-spire-84245.herokuapp.com/\",\n        desp: \"Used PHP and MongoDB to build a web blog. Can do post, update, delete action. Then I deploy the app to Heroku with mLab MongoDB.\",\n      },\n      {\n        name: \"Login PHP\",\n        type: \"img/php.png\",\n        link: \"https://github.com/zzhalex/phplogin\",\n        desp: \"Only use PHP HTML CSS jQuery to build a login Demo(Ongoing).\",\n      },\n      {\n        name: \"Weather Map\",\n        type: \"img/nodejs.png\",\n        link: \"https://github.com/zzhalex/weathermap\",\n        desp: \"Used Node.js, Google map and Heroku to make a weather map. Get data from Environment Canada and render them into Gmap information box.\",\n      },\n    ],\n  },\n];\n\nlet homepageInfo = {\n  leftSideTitle: \"Software Developer\",\n  leftSideSubtitle: \"Translate the Business requirements/logic into Code.\",\n};\n\nlet resumeInfo = {\n  education: {\n    company: \"Simon Fraser University\",\n    position: \"Computer Science\",\n    time: \"2014 May - 2018 April\",\n    location: \"Burnaby, BC\",\n  },\n  work: [\n    {\n      company: \"xMatters, an Everbridge company\",\n      location: \"Vancouver, BC\",\n      position: \"UI Developer\",\n      time: \"2021 July - Present\",\n    },\n    {\n      company: \"D3 Security Managment System Inc.\",\n      location: \"Vancouver, BC\",\n      position: \"Front End Developer\",\n      time: \"2019 January - 2021 June\",\n    },\n    {\n      company: \"Robbox Inc.\",\n      location: \"Richmond, BC\",\n      position: \"Web Developer\",\n      time: \"2018 August - 2019 January\",\n    }\n  ],\n};\n\nlet projectInfo = [\n  {\n    name: \"Weather Box\",\n    tech: \"react.svg\",\n    description: \"Node(Express.js and React) with OpenWeatherAPI\",\n    link: \"https://github.com/zzhalex/weathermap\",\n  },\n  {\n    name: \"Teamwork\",\n    tech: \"nodejs.svg\",\n    description: \"Node application\",\n    link: \"https://github.com/zzhalex/teamwork\",\n  },\n  {\n    name: \"Market Place\",\n    tech: \"django.svg\",\n    description: \"A simple version of market place which builed by Django.\",\n    link: \"https://github.com/zzhalex/py-django-app\",\n  },\n  {\n    name: \"HotCook\",\n    tech: \"ruby.svg\",\n    description:\n      \"HotCooks is a website where users can share their recipes, cooking materials. Built by Ruby on Rails.\",\n    link: \"https://csil-git1.cs.surrey.sfu.ca/mca117/HotCooks\",\n  },\n];\n\nlet demoInfo = {\n  title: \"Feel free to check the Demo\",\n  subtitle:\n    \"I deployed few apps to Heroku. All these servers are free 🙌🏻, so may take few seconds to wake up.\",\n  app: [\n    {\n      name: \"Market Place\",\n      link: \"https://marketplacesite.herokuapp.com/\",\n    },\n    {\n      name: \"Weather Map\",\n      link: \"https://frozen-lowlands-51397.herokuapp.com/\",\n    },\n  ],\n};\n\nlet textInfo = {\n  headerinfo: headerinfo,\n  profileinfo: profileinfo,\n  homepageInfo: homepageInfo,\n  resumeInfo: resumeInfo,\n  projectInfo: projectInfo,\n  demoInfo: demoInfo,\n};\n\nexport default textInfo;\n","import React from \"react\";\nimport textinfo from \"../textInfo\";\n\nlet homepageInfo = textinfo.homepageInfo;\nlet resumeInfo = textinfo.resumeInfo;\nlet expDiv = (data) => {\n  return (\n    <div className=\"expDiv\" key={data.company}>\n      <div className=\"companyName\">\n        {data.company}\n        <span className=\"location\">{data.location}</span>\n      </div>\n      <div className=\"position\">\n        {data.position} <span className=\"time\">{data.time}</span>\n      </div>\n    </div>\n  );\n};\n\nlet workExp = resumeInfo.work.map((work) => expDiv(work));\nlet eduExp = expDiv(resumeInfo.education);\n\nlet leftSide = (\n  <div className=\"leftSide\">\n    <div className=\"leftSideContent\">\n      <div className=\"title\">{homepageInfo.leftSideTitle}</div>\n      <div className=\"subtitle\">{homepageInfo.leftSideSubtitle}</div>\n    </div>\n  </div>\n);\nlet rightSide = (\n  <div className=\"rightSide\">\n    <div className=\"rightSideContent\">\n      <div className=\"work\">\n        <h3 className=\"title\">Work Experience</h3>\n        {workExp}\n      </div>\n      <div className=\"edcuation\">\n        <h3 className=\"title\">Education</h3>\n        {eduExp}\n      </div>\n    </div>\n  </div>\n);\n\n// let profileBody =\nclass Profile extends React.Component {\n  render() {\n    return (\n      <div className=\"Profile\">\n        {leftSide}\n        {rightSide}\n      </div>\n    );\n  }\n}\n\nexport default Profile;\n","import React from \"react\";\nimport textinfo from \"../textInfo\";\n\nconst projectInfo = textinfo.projectInfo;\n\nconst projectDiv = (data) => {\n  return (\n    <div className=\"projectDiv\">\n      <div className=\"name\">{data.name}</div>\n      <div className=\"description\">{data.description}</div>\n      <div className=\"tech\">\n        <img alt=\"tech\" src={process.env.PUBLIC_URL + \"/logo/\" + data.tech} />\n      </div>\n      <a className=\"link\" href={data.link} target=\"_blank\" rel=\"noopener noreferrer\">\n        More\n      </a>\n    </div>\n  );\n};\n\nlet comboDiv = (\n  <div className=\"comboDiv\">{projectInfo.map((data) => projectDiv(data))}</div>\n);\n\nclass Project extends React.Component {\n  render() {\n    return <div className=\"Project\">{comboDiv}</div>;\n  }\n}\n\nexport default Project;\n","import React from \"react\";\nimport textinfo from \"../textInfo\";\n\nconst demoInfo = textinfo.demoInfo.app;\nconst subtitle = textinfo.demoInfo.subtitle;\nconst title = textinfo.demoInfo.title;\nconst demoDiv = (data) => {\n  return (\n    <div className=\"demoDiv\">\n      <a\n        className=\"link\"\n        href={data.link}\n        target=\"_blank\"\n        rel=\"noopener noreferrer\"\n      >\n        {data.name}{\" \"}\n      </a>\n    </div>\n  );\n};\n\nlet leftSide = (\n  <div className=\"leftSide\">\n    {\" \"}\n    <img\n      className=\"herokuLogo\"\n      alt=\"Heroku\"\n      src={process.env.PUBLIC_URL + \"/logo/heroku.svg\"}\n    />\n    {demoInfo.map((data) => demoDiv(data))}\n  </div>\n);\n\nlet rightSide = (\n  <div className=\"rightSide\">\n    <div className=\"title\">{title}</div>\n    <div className=\"subtitle\">{subtitle}</div>\n  </div>\n);\n\nclass Demo extends React.Component {\n  render() {\n    return (\n      <div className=\"Demo\">\n        {leftSide}\n        {rightSide}\n      </div>\n    );\n  }\n}\n\nexport default Demo;\n","import React from \"react\";\nimport Profile from \"./profile\";\nimport Project from \"./project\";\nimport Demo from \"./demo\";\n\nclass Body extends React.Component {\n  render() {\n    let id = parseInt(this.props.activeId);\n    let content;\n    switch (id) {\n      case 1:\n        content = <Profile />;\n        break;\n      case 2:\n        content = <Project />;\n        break;\n      case 3:\n        content = <Demo />;\n        break;\n      default:\n        content = <Profile />;\n    }\n\n    return <div className=\"BodyPart\">{content}</div>;\n  }\n}\n\nexport default Body;\n","import React from \"react\";\nimport \"./App.css\";\n\nimport Header from \"./components/header\";\nimport Body from \"./components/body\";\n\nimport textInfo from \"./textInfo\";\n\nlet headerInfo = textInfo.headerinfo;\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { navItems: headerInfo, activeId: 1 };\n  }\n\n  setHeader = (data) => {\n    this.setState({\n      activeId: data,\n    });\n  };\n  render() {\n    let Nav = this.state.navItems;\n    let activeId = this.state.activeId;\n    return (\n      <div className=\"App\">\n        <Header numbers={Nav} activeId={activeId} setHeader={this.setHeader} />\n        <Body activeId={activeId} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}